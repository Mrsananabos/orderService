// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "orderService/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IOrderService is an autogenerated mock type for the IOrderService type
type IOrderService struct {
	mock.Mock
}

type IOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderService) EXPECT() *IOrderService_Expecter {
	return &IOrderService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: order
func (_m *IOrderService) Create(order models.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IOrderService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - order models.Order
func (_e *IOrderService_Expecter) Create(order interface{}) *IOrderService_Create_Call {
	return &IOrderService_Create_Call{Call: _e.mock.On("Create", order)}
}

func (_c *IOrderService_Create_Call) Run(run func(order models.Order)) *IOrderService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Order))
	})
	return _c
}

func (_c *IOrderService_Create_Call) Return(_a0 error) *IOrderService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderService_Create_Call) RunAndReturn(run func(models.Order) error) *IOrderService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: uid
func (_m *IOrderService) GetById(uid uuid.UUID) (models.OrderView, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 models.OrderView
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.OrderView, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.OrderView); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(models.OrderView)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type IOrderService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - uid uuid.UUID
func (_e *IOrderService_Expecter) GetById(uid interface{}) *IOrderService_GetById_Call {
	return &IOrderService_GetById_Call{Call: _e.mock.On("GetById", uid)}
}

func (_c *IOrderService_GetById_Call) Run(run func(uid uuid.UUID)) *IOrderService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *IOrderService_GetById_Call) Return(_a0 models.OrderView, _a1 error) *IOrderService_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderService_GetById_Call) RunAndReturn(run func(uuid.UUID) (models.OrderView, error)) *IOrderService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// HandleMessage provides a mock function with given fields: message
func (_m *IOrderService) HandleMessage(message []byte) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderService_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type IOrderService_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//   - message []byte
func (_e *IOrderService_Expecter) HandleMessage(message interface{}) *IOrderService_HandleMessage_Call {
	return &IOrderService_HandleMessage_Call{Call: _e.mock.On("HandleMessage", message)}
}

func (_c *IOrderService_HandleMessage_Call) Run(run func(message []byte)) *IOrderService_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *IOrderService_HandleMessage_Call) Return(_a0 error) *IOrderService_HandleMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderService_HandleMessage_Call) RunAndReturn(run func([]byte) error) *IOrderService_HandleMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOrderService creates a new instance of IOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderService {
	mock := &IOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
