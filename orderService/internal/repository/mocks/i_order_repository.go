// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "orderService/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

type IOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderRepository) EXPECT() *IOrderRepository_Expecter {
	return &IOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: order
func (_m *IOrderRepository) Create(order models.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - order models.Order
func (_e *IOrderRepository_Expecter) Create(order interface{}) *IOrderRepository_Create_Call {
	return &IOrderRepository_Create_Call{Call: _e.mock.On("Create", order)}
}

func (_c *IOrderRepository_Create_Call) Run(run func(order models.Order)) *IOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Order))
	})
	return _c
}

func (_c *IOrderRepository_Create_Call) Return(_a0 error) *IOrderRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderRepository_Create_Call) RunAndReturn(run func(models.Order) error) *IOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUid provides a mock function with given fields: _a0
func (_m *IOrderRepository) GetByUid(_a0 uuid.UUID) (models.Order, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetByUid")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Order); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepository_GetByUid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUid'
type IOrderRepository_GetByUid_Call struct {
	*mock.Call
}

// GetByUid is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *IOrderRepository_Expecter) GetByUid(_a0 interface{}) *IOrderRepository_GetByUid_Call {
	return &IOrderRepository_GetByUid_Call{Call: _e.mock.On("GetByUid", _a0)}
}

func (_c *IOrderRepository_GetByUid_Call) Run(run func(_a0 uuid.UUID)) *IOrderRepository_GetByUid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *IOrderRepository_GetByUid_Call) Return(_a0 models.Order, _a1 error) *IOrderRepository_GetByUid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepository_GetByUid_Call) RunAndReturn(run func(uuid.UUID) (models.Order, error)) *IOrderRepository_GetByUid_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentOrders provides a mock function with given fields: limit
func (_m *IOrderRepository) GetRecentOrders(limit int) ([]models.Order, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Order, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Order); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepository_GetRecentOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentOrders'
type IOrderRepository_GetRecentOrders_Call struct {
	*mock.Call
}

// GetRecentOrders is a helper method to define mock.On call
//   - limit int
func (_e *IOrderRepository_Expecter) GetRecentOrders(limit interface{}) *IOrderRepository_GetRecentOrders_Call {
	return &IOrderRepository_GetRecentOrders_Call{Call: _e.mock.On("GetRecentOrders", limit)}
}

func (_c *IOrderRepository_GetRecentOrders_Call) Run(run func(limit int)) *IOrderRepository_GetRecentOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IOrderRepository_GetRecentOrders_Call) Return(_a0 []models.Order, _a1 error) *IOrderRepository_GetRecentOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepository_GetRecentOrders_Call) RunAndReturn(run func(int) ([]models.Order, error)) *IOrderRepository_GetRecentOrders_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
