services:
  orderservice:
    build:
      context: .
      dockerfile: orderService/Dockerfile
    environment:
      - PORT=:${PORT}
      - DB_HOST=${DB_ADDRESS}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_MAX_OPEN_CONNECTION=10
      - KAFKA_HOST=kafka
      - KAFKA_PORT=:9092
      - KAFKA_RETRY=3
      - KAFKA_BACKOFF=100
      - CACHE_SIZE=100
      - CACHE_TTL=300
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      - postgresql

  frontend:
    image: nginx:alpine
    ports:
      - "80:80"
    depends_on:
      - orderservice
    volumes:
      - ./frontend:/usr/share/nginx/html

  postgresql:
    image: docker.io/bitnami/postgresql:17
    ports:
      - '5432:5432'
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
    environment:
      - 'ALLOW_EMPTY_PASSWORD=yes'
  kafka:
    image: docker.io/bitnami/kafka:latest
    ports:
      - '9092:9092'
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8877:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'

volumes:
  postgresql_data:
    driver: local
  kafka_data:
    driver: local