// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "orderService/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ILruCache is an autogenerated mock type for the ILruCache type
type ILruCache struct {
	mock.Mock
}

type ILruCache_Expecter struct {
	mock *mock.Mock
}

func (_m *ILruCache) EXPECT() *ILruCache_Expecter {
	return &ILruCache_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, value
func (_m *ILruCache) Add(key string, value models.OrderView) bool {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, models.OrderView) bool); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ILruCache_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type ILruCache_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - value models.OrderView
func (_e *ILruCache_Expecter) Add(key interface{}, value interface{}) *ILruCache_Add_Call {
	return &ILruCache_Add_Call{Call: _e.mock.On("Add", key, value)}
}

func (_c *ILruCache_Add_Call) Run(run func(key string, value models.OrderView)) *ILruCache_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.OrderView))
	})
	return _c
}

func (_c *ILruCache_Add_Call) Return(_a0 bool) *ILruCache_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILruCache_Add_Call) RunAndReturn(run func(string, models.OrderView) bool) *ILruCache_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *ILruCache) Get(key string) (models.OrderView, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.OrderView
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (models.OrderView, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) models.OrderView); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(models.OrderView)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ILruCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ILruCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *ILruCache_Expecter) Get(key interface{}) *ILruCache_Get_Call {
	return &ILruCache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *ILruCache_Get_Call) Run(run func(key string)) *ILruCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILruCache_Get_Call) Return(_a0 models.OrderView, _a1 bool) *ILruCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ILruCache_Get_Call) RunAndReturn(run func(string) (models.OrderView, bool)) *ILruCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewILruCache creates a new instance of ILruCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILruCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILruCache {
	mock := &ILruCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
